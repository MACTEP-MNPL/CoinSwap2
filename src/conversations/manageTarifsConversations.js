import { getCityByName, updateCityMargin } from "../db/cities.js";
import { isUser2Lvl } from "../utils/userLvl.js";
import { nFormat } from "../utils/n.js";

export const updateCityMarginConversation = async (conversation, ctx) => {
    
    if (!await isUser2Lvl(ctx)) {
        return;
    }

    const cityName = await conversation.external((ctx) => ctx.session.selectedCity)
    
    if (!cityName) {
        await ctx.reply("‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –≤—ã–±—Ä–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ –º–µ–Ω—é.");
        return;
    }

    const city = await getCityByName(cityName);
    
    if (!city) {
        await ctx.reply(`‚ùå –ì–æ—Ä–æ–¥ "${cityName}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
        return;
    }

    await ctx.reply(
        `üèôÔ∏è <b>${cityName}</b>\n\n` +
        `–¢–µ–∫—É—â–∞—è –º–∞—Ä–∂–∞ –ø–æ–∫—É–ø–∫–∏: <b>${nFormat(city.buy_margin)}</b> %\n` +
        `–¢–µ–∫—É—â–∞—è –º–∞—Ä–∂–∞ –ø—Ä–æ–¥–∞–∂–∏: <b>${nFormat(city.sell_margin)}</b> %\n\n` +
        `–ö–∞–∫—É—é –º–∞—Ä–∂—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å? –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:\n` +
        `<code>–ø–æ–∫—É–ø–∫–∞ 10</code> - –∏–∑–º–µ–Ω–∏—Ç –º–∞—Ä–∂—É –ø–æ–∫—É–ø–∫–∏ –Ω–∞ 10%\n` +
        `<code>–ø—Ä–æ–¥–∞–∂–∞ 5</code> - –∏–∑–º–µ–Ω–∏—Ç –º–∞—Ä–∂—É –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ 5%`,
        { parse_mode: "HTML" }
    );

    const response = await conversation.waitFor("message:text");
    const inputText = response.message.text.toLowerCase();
    
    // Split the input into command and value
    const parts = inputText.split(/\s+/);
    
    if (parts.length < 2) {
        await ctx.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏ –∑–Ω–∞—á–µ–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–ø–æ–∫—É–ø–∫–∞ 10'");
        return;
    }
    
    const command = parts[0];
    const valueText = parts[1];
    
    let marginType;
    let marginTypeRussian;
    
    if (command === "–ø–æ–∫—É–ø–∫–∞") {
        marginType = "buy_margin";
        marginTypeRussian = "–ø–æ–∫—É–ø–∫–∏";
    } else if (command === "–ø—Ä–æ–¥–∞–∂–∞") {
        marginType = "sell_margin";
        marginTypeRussian = "–ø—Ä–æ–¥–∞–∂–∏";
    } else {
        await ctx.reply("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ø–æ–∫—É–ø–∫–∞' –∏–ª–∏ '–ø—Ä–æ–¥–∞–∂–∞'.");
        return;
    }
    
    // Validate new margin value
    let newMargin;
    try {
        newMargin = parseFloat(valueText.replace(',', '.'));
        
        if (isNaN(newMargin)) {
            throw new Error("Invalid margin value");
        }
        
        // Format to 2 decimal places
        newMargin = parseFloat(newMargin.toFixed(2));
    } catch (error) {
        await ctx.reply("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.");
        return;
    }

    // Update margin in database
    try {
        const updatedCity = await updateCityMargin(cityName, marginType, newMargin);
        
        await ctx.reply(
            `‚úÖ –ú–∞—Ä–∂–∞ ${marginTypeRussian} –¥–ª—è –≥–æ—Ä–æ–¥–∞ ${cityName} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n` +
            `–ù–æ–≤–∞—è –º–∞—Ä–∂–∞ ${marginTypeRussian}: <b>${nFormat(updatedCity[marginType])}</b> %`,
            { parse_mode: "HTML" }
        );
    } catch (error) {
        console.error("Error updating city margin:", error);
        await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–∞—Ä–∂–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    }
}; 