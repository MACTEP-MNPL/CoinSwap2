import { Composer } from "grammy"
import { getNewCode } from "../db/codes.js"
import { getNewToken } from "../db/tokens.js"
import { isUser2Lvl, isAdmin } from "../utils/userLvl.js"
import { db } from "../bot.js"
import { createNewAccount, getAccountByChat, getAccountBalances } from "../db/accounts.js"
import { nFormat, nCode } from "../utils/n.js"
import { getMoscow, getMakhachkala } from "../db/cities.js"
import { createNewBalance, deleteBalanceByName, resetBalance, getBalanceByAccountId, getBalanceByAccountIdAndCurrency} from "../db/balances.js"
import { undoCreatingNewBalanceMenu, undoClearingBalanceMenu, undoDeletingNewBalanceMenu } from "../menus/undoMenus.js"
import { getABCEXCommandMessage } from "../messages/getABCEXCommandMessage.js"
import { createNewTransaction } from "../db/transactions.js"
import { InputFile } from "grammy"
import ExcelJS from 'exceljs'
import { deleteAccountByChat } from "../db/accounts.js"
import { InlineKeyboard } from "grammy"
import { hideTransactionsByCtx } from "../db/transactions.js"


export const russianCommands = new Composer()   

russianCommands.hears('/–∫–æ–¥', async (ctx) => {
    await ctx.reply(
        `<blockquote>#–∫–æ–¥</blockquote> \n` +
        `üîê <b>–ö–û–î:</b> <code>${await getNewCode()}</code>`,
        {parse_mode: 'HTML'}
    )
})

russianCommands.hears('/—Ç–∏–∫–µ—Ç', async (ctx) => {
    await ctx.reply('–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç, –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n' +
        '<code>/—Ç–∏–∫–µ—Ç –ù–∞–∑–≤–∞–Ω–∏–µ @username @username 1000$</code>', {parse_mode: 'HTML'})
})

russianCommands.hears(/^\/—Ç–∏–∫–µ—Ç\s+(\S+)\s+(?:@)?(\S+)\s+(?:@)?(\S+)\s+(\d+(?:[\s,]\d+)*)(?:\s+(.+))?/, async (ctx) => {
    const [, city, sender, receiver, amountStr, sign] = ctx.message.text.split(' ')
    const code = await getNewCode()

    const amount = `<code>${amountStr}</code>` + ' ' + (sign ? sign : '')

    await ctx.reply(
        `üìç ${city}\n` +
        `‚û°Ô∏è –û—Ç–¥–∞—ë—Ç: ${sender}\n` +
        `‚¨ÖÔ∏è –ü—Ä–∏–Ω–∏–º–∞–µ—Ç: ${receiver}\n` +
        `üí∞ –°—É–º–º–∞: ${amount}\n` +
        `üîê –ö–æ–¥: <code>${code}</code>`,
        { parse_mode: 'HTML' }
    );
});

russianCommands.hears('/—Ç–æ–∫–µ–Ω', async (ctx) => {
    const token = await getNewToken()

    await ctx.reply(`<blockquote>#—Ç–æ–∫–µ–Ω</blockquote> \n` +
        `üîë <b>–¢–û–ö–ï–ù:</b> <code>${token}</code>`, {parse_mode: 'HTML'})
})

russianCommands.hears(/^\/—É–≤–µ–¥–æ–º–∏($|\s)/, async (ctx) => {
    if (!await isUser2Lvl(ctx)) {
        return
    }

    const text = ctx.message.text.slice(9).trim()

    if (!text) {
        await ctx.reply('–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n–ü—Ä–∏–º–µ—Ä: /messages –í–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
        return
    }

    try {
        const [chatIds] = await db.execute('SELECT chat_id FROM accounts')
        
        let successCount = 0
        let failCount = 0

        for (const {chat_id} of chatIds) {
            try {
                await ctx.api.sendMessage(chat_id, text, { parse_mode: 'HTML' })
                successCount++
            } catch (error) {
                failCount++
            }
        }

        await ctx.reply(
            `‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:\n` +
            `‚îú –£—Å–ø–µ—à–Ω–æ: ${successCount}\n` +
            `‚îî –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ${failCount}`,
            { parse_mode: 'HTML' }
        )

    } catch (error) {
        console.error('Error sending notifications:', error)
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π')
    }
})

russianCommands.hears(/^\/—Å–æ–∑–¥–∞–π($|\s)/, async (ctx) => {

    if (!await isAdmin(ctx)) {
        return
    }

    const name = ctx.message.text.split(' ')[1];
    
    if (!name) {
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞.\n–ü—Ä–∏–º–µ—Ä: <code>/—Å–æ–∑–¥–∞–π –û—Å–Ω–æ–≤–Ω–æ–π</code>', {parse_mode: 'HTML'});
        return;
    }

    try {
        await createNewAccount(ctx.chat.id, name);

        await ctx.reply(
            `<blockquote>#${name}</blockquote> \n` +
            `"<i>–°—á–µ—Ç–∞ USDT, RUB, USD, EUR —Å–æ–∑–¥–∞–Ω—ã</i>"`,
            {parse_mode: 'HTML'}
        );

    } catch (error) {
        if (error.code === 'ER_DUP_ENTRY') {
            await ctx.reply('‚ùå –ê–∫–∫–∞—É–Ω—Ç –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <code>/–±</code> —á—Ç–æ –±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ',
            {parse_mode: 'HTML'}
        )

        } else {
            await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞');
            throw error;
        }
    }
});

russianCommands.hears('/–±', async (ctx) => {
    try {
        const account = await getAccountByChat(ctx.chat.id);
        
        if (!account) {
            await ctx.reply(
                '‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞.\n' +
                '–°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π: <code>/—Å–æ–∑–¥–∞–π –ù–∞–∑–≤–∞–Ω–∏–µ</code>', 
                {parse_mode: 'HTML'}
            );
            return;
        }

        const balances = await getAccountBalances(account.id);
        
        if (!balances.length) {
            await ctx.reply(
                `<blockquote>#${account.name}</blockquote>\n` +
                '–ù–∞ —ç—Ç–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ –Ω–µ—Ç —Å—á–µ—Ç–æ–≤',
                {parse_mode: 'HTML'}
            );
            return;
        }

        const balanceLines = balances.map(b => 
            `${b.currency}: ${nFormat(b.balance)}`
        ).join('\n');

        await ctx.reply(
            `<blockquote>#${account.name}</blockquote>\n\n` +
            balanceLines,
            {parse_mode: 'HTML'}
        );

    } catch (error) {
        console.error('Error in /–± command:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞');
        throw error;
    }
});

russianCommands.hears(/^\/–±\s+(.+)$/, async (ctx) => {
    try {
        const requestedCurrency = ctx.match[1].toUpperCase();
        const account = await getAccountByChat(ctx.chat.id);

        if (!account) {
            await ctx.reply('‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞.\n' +
                '–°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π: <code>/—Å–æ–∑–¥–∞–π –ù–∞–∑–≤–∞–Ω–∏–µ</code>', 
                {parse_mode: 'HTML'}
            );
            return;
        }

        const balances = await getAccountBalances(account.id);
        const balance = balances.find(b => b.currency.toUpperCase() === requestedCurrency);
        
        if (!balance) {
            await ctx.reply(
                `<blockquote>#${account.name}</blockquote>\n\n` +
                `–°—á–µ—Ç ${requestedCurrency} –Ω–µ –Ω–∞–π–¥–µ–Ω`,
                {parse_mode: 'HTML'}
            );
            return;
        }

        await ctx.reply(
            `<blockquote>#${account.name}</blockquote>\n\n` +
            `${balance.currency}: ${balance.balance < 0 ? '-' : ''}${Math.abs(balance.balance).toLocaleString()}`,
            {parse_mode: 'HTML'}
        );

    } catch (error) {
        console.error('Error in /–± command:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—á–µ—Ç–∞');
        throw error;
    }
});

russianCommands.hears('/–º—Ö–ª', async (ctx) => {
    const makhachkala = await getMakhachkala()

    await ctx.reply(
        `<b>üåÑ –ú–∞—Ö–∞—á–∫–∞–ª–∞</b> - CoinSwap\n` +
        `<b>‚îú –ö—É–ø–∏—Ç—å</b> - ${nCode(makhachkala.buy_price)} ‚ÇΩ\n` +
        `<b>‚îî –ü—Ä–æ–¥–∞—Ç—å</b> - ${nCode(makhachkala.sell_price)} ‚ÇΩ`, {
        parse_mode: "HTML"
    }
    )
})

russianCommands.hears('/–º—Å–∫', async (ctx) => {  
    const moscow = await getMoscow()

    await ctx.reply(
        `<b>üèôÔ∏è –ú–æ—Å–∫–≤–∞</b> - CoinSwap\n` +
        `<b>‚îú –ö—É–ø–∏—Ç—å</b> - ${nCode(moscow.buy_price)} ‚ÇΩ\n` +
        `<b>‚îî –ü—Ä–æ–¥–∞—Ç—å</b> - ${nCode(moscow.sell_price)} ‚ÇΩ`, {
        parse_mode: "HTML"
    }
)
})

russianCommands.hears(/^\/–¥–æ–±–∞–≤—å\s+(.+)$/, async (ctx) => {
    try {

        if (!await isAdmin(ctx)) {
            return;
        }

        const currency = ctx.match[1].toUpperCase();

        if (!currency) {
            await ctx.reply('–£–∫–∞–∂–∏—Ç–µ –≤–∞–ª—é—Ç—É.\n–ü—Ä–∏–º–µ—Ä: <code>/add USDT</code>', {parse_mode: 'HTML'});
            return;
        }

        const account = await getAccountByChat(ctx.chat.id);
        
        if (!account) {
            await ctx.reply(
                '‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞.\n' +
                
                '–°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π: <code>/—Å–æ–∑–¥–∞–π –ù–∞–∑–≤–∞–Ω–∏–µ</code>', 
                {parse_mode: 'HTML'}
            );
            return;
        }

        await createNewBalance(account.id, currency);
        
        await ctx.reply(
            `<blockquote>#${account.name}</blockquote>\n\n` +
            `<i>"–°—á–µ—Ç ${currency} –¥–æ–±–∞–≤–ª–µ–Ω"</i>`,
            {parse_mode: 'HTML', reply_markup: undoCreatingNewBalanceMenu}
        );

        const balance = await getBalanceByAccountIdAndCurrency(account.id, currency);

        await createNewTransaction(balance[0].id, ctx.from.id, account.id, 0,`–°–û–ó–î–ê–ù–ò–ï –°–ß–ï–¢–ê`, 0, ctx.message.message_id, currency)

    } catch (error) {
        if (error.message === 'CURRENCY_EXISTS') {
            await ctx.reply(
                '‚ùå –¢–∞–∫–æ–π —Å—á–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —ç—Ç–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ',
                {parse_mode: 'HTML'}
            );
            return;
        }
        console.error('Error in /–¥–æ–±–∞–≤—å command:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—á–µ—Ç–∞');
        throw error;
    }
});

russianCommands.hears(/^\/—É–¥–∞–ª–∏\s+(.+)$/, async (ctx) => {

    if (!await isAdmin(ctx)) {
        return;
    }

    try {
        const currency = ctx.match[1].toUpperCase();
        const account = await getAccountByChat(ctx.chat.id);
        
        if (!account) {
            await ctx.reply(
                '‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞.\n' +
                '–°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π: <code>/—Å–æ–∑–¥–∞–π –ù–∞–∑–≤–∞–Ω–∏–µ</code>', 
                {parse_mode: 'HTML'}
            );
            return;
        }

        const balance = await getBalanceByAccountIdAndCurrency(account.id, currency);

        await deleteBalanceByName(account.id, currency);

        await createNewTransaction(balance[0].id, ctx.from.id, account.id, -balance[0].balance,`–£–î–ê–õ–ï–ù–ò–ï –°–ß–ï–¢–ê`, 0, ctx.message.message_id, currency)
        
        await ctx.reply(
            `<blockquote>#${account.name}</blockquote>\n\n` +
            `<i>"–°—á–µ—Ç ${currency} —É–¥–∞–ª–µ–Ω"</i>`,
            {parse_mode: 'HTML', reply_markup: undoDeletingNewBalanceMenu}
        );

    } catch (error) {
        if (error.message === 'BALANCE_NOT_FOUND') {
            await ctx.reply(
                '‚ùå –¢–∞–∫–æ–π —Å—á–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —ç—Ç–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ',
                {parse_mode: 'HTML'}
            );
            return;
        }
        
        console.error('Error in /—É–¥–∞–ª–∏—Ç—å command:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—á–µ—Ç–∞');
        throw error;
    }
});

russianCommands.hears(/^\/–æ—á–∏—Å—Ç–∏\s+(.+)$/, async (ctx) => {

    if (!await isAdmin(ctx)) {
        return;
    }

    try {
        const currency = ctx.match[1].toUpperCase();
        const account = await getAccountByChat(ctx.chat.id);
        
        if (!account) {
            await ctx.reply(
                '‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞.\n' +
                '–°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π: <code>/—Å–æ–∑–¥–∞–π –ù–∞–∑–≤–∞–Ω–∏–µ</code>', 
                {parse_mode: 'HTML'}
            );
            return;
        }

        const oldBalance = await getBalanceByAccountIdAndCurrency(account.id, currency);

        await resetBalance(account.id, currency);

        await createNewTransaction(oldBalance[0].id, ctx.from.id, account.id, -oldBalance[0].balance,`–û–ë–ù–£–õ–ï–ù–ò–ï –°–ß–ï–¢–ê`, 0, ctx.message.message_id, currency)
        
        await ctx.reply(
            `<blockquote>#${account.name}</blockquote>\n\n` +
            `<i>"–ë–∞–ª–∞–Ω—Å ${currency} –æ–±–Ω—É–ª–µ–Ω"</i>`,
            {parse_mode: 'HTML', reply_markup: undoClearingBalanceMenu}
        );

    } catch (error) {
        if (error.message === 'BALANCE_NOT_FOUND') {
            await ctx.reply(
                '‚ùå –¢–∞–∫–æ–π —Å—á–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —ç—Ç–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ',
                {parse_mode: 'HTML'}
            );
            return;
        }
        console.error('Error in /–æ—á–∏—Å—Ç–∏—Ç—å command:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω—É–ª–µ–Ω–∏–∏ —Å—á–µ—Ç–∞');
        throw error;
    }
});

russianCommands.hears('/–∞–±—Ü', async (ctx) => {
    const message = await getABCEXCommandMessage()
    await ctx.reply(message, {parse_mode: 'HTML', disable_web_page_preview: true})
})

const dropKeyboard = new InlineKeyboard().text('üóë –°–≤–µ—Ä–∏—Ç—å –≤—ã–ø–∏—Å–∫—É', 'drop_summary')
const dropFinalKeyboard = new InlineKeyboard()
.text('–ù–µ—Ç', 'cancel_summary')
.text('–î–∞', 'finalDrop_summary')

russianCommands.callbackQuery('drop_summary', async (ctx) => {
    if(!await isAdmin(ctx)) {
        return;
    }

    await ctx.reply('‚ùóÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω—É–ª–∏—Ç—å –≤—ã–ø–∏—Å–∫—É?', {reply_markup: dropFinalKeyboard})
})

russianCommands.callbackQuery('cancel_summary', async (ctx) => {
    if(!await isAdmin(ctx)) {
        return;
    }

    await ctx.deleteMessage()

    await ctx.reply('–î–µ–π—Å—Ç–≤–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ üëç', {parse_mode: 'HTML'})

})


russianCommands.callbackQuery('finalDrop_summary', async (ctx) => {
    if(!await isAdmin(ctx)) {
        return;
    }

    await ctx.deleteMessage()

    await hideTransactionsByCtx(ctx)

    await ctx.reply('–í—ã–ø–∏—Å–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–≤–µ—Ä–µ–Ω–∞ üëç', {parse_mode: 'HTML'})

})

russianCommands.hears('/–≤—ã–ø–∏—Å–∫–∞', async (ctx) => {

    try {
        const account = await getAccountByChat(ctx.chat.id);
        
        if (!account) {
            await ctx.reply(
                '‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞.\n' +
                '–°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π: <code>/—Å–æ–∑–¥–∞–π –ù–∞–∑–≤–∞–Ω–∏–µ</code>', 
                {parse_mode: 'HTML'}
            );
            return;
        }

        // Get all transactions
        const [transactions] = await db.execute(
            `SELECT 
                t.created_at,
                t.currency,
                t.amount,
                u.username as user_username,
                a.name as account_name,
                t.comment,
                t.current_balance
            FROM transactions t
            LEFT JOIN users u ON t.user_id = u.id
            LEFT JOIN accounts a ON t.account_id = a.id
            WHERE t.account_id = ? AND t.is_shown = TRUE
            ORDER BY t.created_at DESC`,
            [account.id]
        );

        if (!transactions.length) {
            await ctx.reply(
                `<blockquote>#${account.name}</blockquote>\n` +
                '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç',
                {parse_mode: 'HTML'}
            );
            return;
        }

        // Create a new workbook
        const workbook = new ExcelJS.Workbook();
        const worksheet = workbook.addWorksheet('–í—ã–ø–∏—Å–∫–∞');

        // Define columns
        worksheet.columns = [
            { header: '–î–∞—Ç–∞', key: 'date', width: 12 },
            { header: '–í–∞–ª—é—Ç–∞', key: 'currency', width: 10 },
            { header: '–°—É–º–º–∞', key: 'amount', width: 15 },
            { header: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', key: 'username', width: 20 },
            { header: '–°—á–µ—Ç', key: 'account', width: 15 },
            { header: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', key: 'comment', width: 35 },
            { header: '–û—Å—Ç–∞—Ç–æ–∫', key: 'balance', width: 15 }
        ];

        // Style the header row
        const headerRow = worksheet.getRow(1);
        headerRow.font = {
            name: 'Arial',
            size: 11,
            bold: true,
            color: { argb: 'FFFFFF' }
        };
        headerRow.fill = {
            type: 'pattern',
            pattern: 'solid',
            fgColor: { argb: '4472C4' }
        };
        headerRow.alignment = {
            vertical: 'middle',
            horizontal: 'center'
        };

        // Add data and style each row
        transactions.forEach((tx, index) => {
            const date = new Date(tx.created_at).toLocaleDateString('ru-RU', {
                day: '2-digit',
                month: '2-digit',
                year: '2-digit'
            });

            const row = worksheet.addRow({
                date: date,
                currency: tx.currency,
                amount: tx.amount,
                username: tx.user_username ? `@${tx.user_username}` : '',
                account: tx.account_name,
                comment: tx.comment || '',
                balance: tx.current_balance
            });

            // Alternate row colors
            row.fill = {
                type: 'pattern',
                pattern: 'solid',
                fgColor: { argb: index % 2 === 0 ? 'FFFFFF' : 'F2F2F2' }
            };

            // Style amounts and balance (red for negative, green for positive)
            const amountCell = row.getCell('amount');
            const balanceCell = row.getCell('balance');

            [amountCell, balanceCell].forEach(cell => {
                // Format the value using nFormat before setting it
                cell.value = nFormat(cell.value);
                cell.numFmt = '#,##0.00';
                cell.font = {
                    name: 'Arial',
                    size: 11,
                    color: { argb: parseFloat(cell.value.replace(/,/g, '')) < 0 ? 'FF0000' : '008000' }
                };
            });

            // Center currency and username
            row.getCell('currency').alignment = { horizontal: 'center' };
            row.getCell('username').alignment = { horizontal: 'left' };
        });

        // Add borders to all cells
        worksheet.eachRow((row) => {
            row.eachCell((cell) => {
                cell.border = {
                    top: { style: 'thin', color: { argb: 'D9D9D9' } },
                    left: { style: 'thin', color: { argb: 'D9D9D9' } },
                    bottom: { style: 'thin', color: { argb: 'D9D9D9' } },
                    right: { style: 'thin', color: { argb: 'D9D9D9' } }
                };
                if (!cell.font) {
                    cell.font = { name: 'Arial', size: 11 };
                }
            });
        });

        // Generate buffer
        const buffer = await workbook.xlsx.writeBuffer();

        // Send document
        await ctx.replyWithDocument(
            new InputFile(
                buffer,
                `–≤—ã–ø–∏—Å–∫–∞_${account.name}_${Date.now()}.xlsx`
            ),
            {
                caption: `<blockquote>#${account.name}</blockquote>\n–í—ã–ø–∏—Å–∫–∞ –ø–æ —Å—á–µ—Ç—É`,
                parse_mode: 'HTML', 
                reply_markup: dropKeyboard
            }
        );

    } catch (error) {
        console.error('Error in /–≤—ã–ø–∏—Å–∫–∞ command:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—ã–ø–∏—Å–∫–∏');
        throw error;
    }
})

russianCommands.hears('/—Å–±—Ä–æ—Å', async (ctx) => {
    if (!await isAdmin(ctx)) {
        return;
    }

    const account = await getAccountByChat(ctx.chat.id);

    if (!account) {
        await ctx.reply('‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞', {parse_mode: 'HTML'});
        return;
    }

    await deleteAccountByChat(ctx.chat.id);

    await ctx.reply(`‚ùå –ê–∫–∫–∞—É–Ω—Ç <code>#${account.name}</code> –≤ —ç—Ç–æ–º —á–∞—Ç–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω`, {parse_mode: 'HTML'});
})

russianCommands.hears(/^\/–æ—Ç–ø—Ä–∞–≤—å($|\s)/, async (ctx) => {
    if (!await isUser2Lvl(ctx)) {
        return
    }

    const text = ctx.message.text.slice(9).trim()

    if (!text) {
        await ctx.reply('–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n–ü—Ä–∏–º–µ—Ä: /–æ—Ç–ø—Ä–∞–≤—å –í–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
        return
    }

    try {
        const [users] = await db.execute('SELECT id FROM users')
        
        let successCount = 0
        let failCount = 0

        for (const {id} of users) {
            try {
                await ctx.api.sendMessage(id, text, { parse_mode: 'HTML' })
                successCount++
            } catch (error) {
                failCount++
            }
        }

        await ctx.reply(
            `‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:\n` +
            `‚îú –£—Å–ø–µ—à–Ω–æ: ${successCount}\n` +
            `‚îî –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ${failCount}`,
            { parse_mode: 'HTML' }
        )

    } catch (error) {
        console.error('Error sending messages to users:', error)
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π')
    }
})
